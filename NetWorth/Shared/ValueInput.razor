@using Interfaces

@if (dataValue != null)
{
    <EditForm EditContext=@editContext
              OnSubmit=@FormSubmitted>
        <div class="container">
            <div class="row">
                <div class="col-sm-12 col-md-6">
                    <label class="col-form-label"
                           for=@this.GetHashCode()>
                        @title
                    </label>
                </div>
                <div class="col-sm-12 col-md-6">
                    <div class="input-group">
                        @if (!String.IsNullOrEmpty(prefixUnit))
                        {
                            <span class="input-group-text">
                                @prefixUnit
                            </span>
                        }
                        <InputNumber id=@this.GetHashCode()
                                     class="form-control"
                                     aria-label=@title
                                     @bind-Value=@inputValue
                                     @onblur=@ValidateAndUpdateValue />
                    </div>
                </div>
            </div>
            @if (!String.IsNullOrEmpty(errorMessage))
            {
                <div class="row">
                    <div class="col-12">
                        <div class="alert alert-danger mt-2"
                             role="alert">
                            @errorMessage
                        </div>
                    </div>
                </div>
            }
        </div>
    </EditForm>
}
else
{
    <div class="alert alert-danger" role="alert">
        A value has not been defined!
    </div>
}

@code {
    /// <summary>
    /// The data representation for this input.
    /// </summary>
    [Parameter, EditorRequired]
    public IValue<Double>? dataValue { get; set; }

    /// <summary>
    /// Method to call when inputs are valid and updated.
    /// </summary>
    [Parameter]
    public Action? onUpdate { get; set; }

    /// <summary>
    /// The validator for the input.
    /// </summary>
    [Parameter]
    public IValidator<Double>? validator { get; set; }

    /// <summary>
    /// The formatter for the input.
    /// </summary>
    [Parameter]
    public IFormatter<Double, Decimal>? formatter { get; set; }

    private Decimal inputValue { get; set; }

    private String errorMessage = String.Empty;

    private String prefixUnit = String.Empty;

    private String title = String.Empty;

    private EditContext? editContext { get; set; }

    private void FormSubmitted(EditContext context)
    {
        ValidateAndUpdateValue();
    }

    private void ValidateAndUpdateValue()
    {
        if (dataValue == null) { return; }

        errorMessage = String.Empty;

        Double testValue = (Double)inputValue;
        if (formatter != null)
        {
            testValue = formatter.deformat(inputValue);
        }

        if (validator == null)
        {
            UpdateValue(testValue);
        }
        else if (validator.isValid(testValue))
        {
            UpdateValue(testValue);
        }
        else
        {
            errorMessage = validator.errorMessage;
        }
    }

    private void UpdateValue(Double newValue)
    {
        if (dataValue == null) { return; }

        dataValue.value = newValue;

        if (formatter == null)
        {
            inputValue = (Decimal)newValue;
        }
        else
        {
            inputValue = formatter.format(newValue);
        }

        if (onUpdate != null)
        {
            onUpdate.Invoke();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (dataValue != null)
        {
            title = dataValue.title;
            editContext = new EditContext(dataValue);
        }

        // Set initial input value
        if (formatter == null)
        {
            inputValue = 0;
        }
        else
        {
            inputValue = formatter.defaultValue;
            prefixUnit = formatter.prefixUnit;
        }
    }
}