@using Interfaces

@if (category != null)
{
    <div class="card mb-2">
        <div class="card-header">@category.title</div>
        @foreach (ISubcategory<Double> sub in category.subcategories)
        {
            <SubcategorySection subcategory=@sub
                                onUpdate=@onSubcategoryUpdated
                                formatter=@formatter
                                validator=@validator />
        }
        <div class="card-footer text-end">Total: @totalValue</div>
    </div>
}
else
{
    <div class="alert alert-danger" role="alert">
        A category has not been defined!
    </div>
}

@code {

    /// <summary>
    /// The category to generate the section for.
    /// </summary>
    [Parameter]
    public ICategory<Double>? category { get; set; }

    /// <summary>
    /// The validator for inputs within the section.
    /// </summary>
    [Parameter]
    public IValidator<Double>? validator { get; set; }

    /// <summary>
    /// The formatter for inputs within the section.
    /// </summary>
    [Parameter]
    public IFormatter<Double, Decimal>? formatter { get; set; }

    private String? totalValue { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        updateTotal();
    }

    private void updateTotal()
    {
        if (category == null) { return; }
        totalValue = String.Format("{0:C2}", category.totalValue);
        StateHasChanged();
    }

    /// <summary>
    /// Method to call when inputs are valid and updated.
    /// </summary>
    [Parameter]
    public Action? onUpdate { get; set; }

    private void onSubcategoryUpdated()
    {
        updateTotal();
        if (onUpdate != null)
        {
            onUpdate.Invoke();
        }
    }
}

